import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:path_provider/path_provider.dart';
import 'domain/entities/car_analysis.dart';
import 'domain/entities/trim_candidate.dart';
import 'domain/entities/key_specs.dart';
import 'domain/entities/price_estimates.dart';
import 'domain/entities/performance_specs.dart';
import 'domain/entities/similar_model.dart';
import 'application/providers/settings_provider.dart';
import 'application/providers/repository_providers.dart';
import 'application/providers/router_provider.dart';
import 'infrastructure/services/subscription_service.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Set up error handling for release mode
  FlutterError.onError = (FlutterErrorDetails details) {
    FlutterError.presentError(details);
  };

  // Initialize Hive
  await Hive.initFlutter();

  // Register Hive adapters (generated by build_runner)
  Hive.registerAdapter(CarAnalysisAdapter());
  Hive.registerAdapter(TrimCandidateAdapter());
  Hive.registerAdapter(KeySpecsAdapter());
  Hive.registerAdapter(PriceEstimatesAdapter());
  Hive.registerAdapter(PerformanceSpecsAdapter());
  Hive.registerAdapter(SimilarModelAdapter());

  // Open Hive boxes
  final analysisBox = await Hive.openBox<CarAnalysis>('analyses');
  final settingsBox = await Hive.openBox('settings');

  // Initialize subscription service
  await SubscriptionService.instance.initialize();

  runApp(
    ProviderScope(
      overrides: [
        analysisBoxProvider.overrideWithValue(analysisBox),
        settingsBoxProvider.overrideWithValue(settingsBox),
      ],
      child: const CarIdentifierApp(),
    ),
  );
}

class CarIdentifierApp extends ConsumerWidget {
  const CarIdentifierApp({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final settings = ref.watch(settingsProvider);
    final router = ref.watch(routerProvider);

    return MaterialApp.router(
      title: 'CarPeek',
      debugShowCheckedModeBanner: false,
      themeMode: settings.themeMode,
      theme: _buildLightTheme(),
      darkTheme: _buildDarkTheme(),
      routerConfig: router,
    );
  }

  ThemeData _buildLightTheme() {
    const primaryColor = Color(0xFF1E3A8A); // Deep electric blue
    const secondaryColor = Color(0xFF7C3AED); // Vibrant accent

    return ThemeData(
      useMaterial3: true,
      colorScheme: ColorScheme.fromSeed(
        seedColor: primaryColor,
        secondary: secondaryColor,
        brightness: Brightness.light,
      ),
      appBarTheme: const AppBarTheme(
        systemOverlayStyle: SystemUiOverlayStyle.dark,
      ),
    );
  }

  ThemeData _buildDarkTheme() {
    const primaryColor = Color(0xFF3B82F6); // Lighter blue for dark mode
    const secondaryColor = Color(0xFF8B5CF6); // Lighter accent for dark mode

    return ThemeData(
      useMaterial3: true,
      colorScheme: ColorScheme.fromSeed(
        seedColor: primaryColor,
        secondary: secondaryColor,
        brightness: Brightness.dark,
      ),
      appBarTheme: const AppBarTheme(
        systemOverlayStyle: SystemUiOverlayStyle.light,
      ),
    );
  }
}